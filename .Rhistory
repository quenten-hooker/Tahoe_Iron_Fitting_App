ClubFamilyName, MonitorTypeName, ImpactHeadSpeedMph, ImpactAttackAngleDeg, ImpactPathAngleDeg,
ImpactYawAngleDeg, ImpactPitchAngleDeg, ImpactRollAngleDeg, ImpactHorizLocInch, ImpactVertLocInch,
BallSpeedMph, BallLaunchAngleDeg, BallSideAngleDeg, BallBackSpinRpm, BallSideSpinRpm, ShotApexFt,
ShotMaxLateralTravelFt, ShotCarryYd, ShotCarryDispFt, ShotTotalYd, ShotTotalDispFt,
ShotFlightTimeSec, SmashFactor
FROM Engage.cg_Engage.vwMeasuredShotsAll;")
Data.Engage %>% group_by(MonitorTypeName) %>% summarise(n())
Data.Engage %>% group_by(Location) %>% summarise(n())
Data.Engage %>% filter(EventName == 'Callaway Performance Center - Carlsbad') %>% group_by(AccountFullName) %>% summarise(n())
Data_Engage_Quad_Carlsbad <- Data.Engage %>% filter(EventName == 'Callaway Performance Center - Carlsbad')
Data_Engage_Quad_Carlsbad %>% group_by(FittingId) %>% summarise(num = n()) %>% arrange(desc(num))
Data_Engage_Quad_Carlsbad %>% filter(CategoryName == "Irons") %>% group_by(ClubFamilyName) %>% summarise(num = n()) %>% arrange(desc(num))
#library(quantmod)
#library(nnet)
library('doMC')
library('tensorflow')
library('caret')
library('NeuralNetTools')
#select correct clubs
Data_Engage_Quad_Carlsbad_Iron_Select <- Data_Engage_Quad_Carlsbad %>% filter(CategoryName == "Irons", ClubFamilyName == "APEX TCB 21" | ClubFamilyName == "APEX 21" | ClubFamilyName == "APEX DCB 21" | ClubFamilyName == "APEX PRO 21 IRONS" | ClubFamilyName == "APEX MB 21")
#rename clubs
Data_Engage_Quad_Carlsbad_Iron_Select$ClubFamilyName[Data_Engage_Quad_Carlsbad_Iron_Select$ClubFamilyName == "APEX TCB 21" ] <- "APEX_TCB_21"
Data_Engage_Quad_Carlsbad_Iron_Select$ClubFamilyName[Data_Engage_Quad_Carlsbad_Iron_Select$ClubFamilyName == "APEX 21" ] <- "APEX_21"
Data_Engage_Quad_Carlsbad_Iron_Select$ClubFamilyName[Data_Engage_Quad_Carlsbad_Iron_Select$ClubFamilyName == "APEX DCB 21" ] <- "APEX_DCB_21"
Data_Engage_Quad_Carlsbad_Iron_Select$ClubFamilyName[Data_Engage_Quad_Carlsbad_Iron_Select$ClubFamilyName == "APEX PRO 21 IRONS" ] <- "APEX_PRO_21"
Data_Engage_Quad_Carlsbad_Iron_Select$ClubFamilyName[Data_Engage_Quad_Carlsbad_Iron_Select$ClubFamilyName == "APEX MB 21" ] <- "APEX_MB_21"
#remove NA
Data_Engage_Quad_Carlsbad_Iron_Select <- Data_Engage_Quad_Carlsbad_Iron_Select %>% filter(!is.na(ClubFamilyName), !is.na(ImpactHeadSpeedMph))
#plot to check outliers
ggplot(Data_Engage_Quad_Carlsbad_Iron_Select, aes(x = SmashFactor)) + geom_histogram(aes(y = ..density..), colour = 1, fill = "white") +  geom_density()
ggplot(Data_Engage_Quad_Carlsbad_Iron_Select, aes(x = ImpactHeadSpeedMph)) + geom_histogram(aes(y = ..density..), colour = 1, fill = "white") +  geom_density()
ggplot(Data_Engage_Quad_Carlsbad_Iron_Select, aes(x = BallSpeedMph)) + geom_histogram(aes(y = ..density..), colour = 1, fill = "white") +  geom_density()
ggplot(Data_Engage_Quad_Carlsbad_Iron_Select, aes(x = BallLaunchAngleDeg)) + geom_histogram(aes(y = ..density..), colour = 1, fill = "white") +  geom_density()
ggplot(Data_Engage_Quad_Carlsbad_Iron_Select, aes(x = BallSideAngleDeg)) + geom_histogram(aes(y = ..density..), colour = 1, fill = "white") +  geom_density()
ggplot(Data_Engage_Quad_Carlsbad_Iron_Select, aes(x = BallBackSpinRpm)) + geom_histogram(aes(y = ..density..), colour = 1, fill = "white") +  geom_density()
ggplot(Data_Engage_Quad_Carlsbad_Iron_Select, aes(x = BallSideSpinRpm)) + geom_histogram(aes(y = ..density..), colour = 1, fill = "white") +  geom_density()
#remove bounds
Data_Engage_Quad_Carlsbad_Iron_Select <- Data_Engage_Quad_Carlsbad_Iron_Select %>% filter(SmashFactor > 1, SmashFactor < 1.4, ImpactHeadSpeedMph < 110, ImpactHeadSpeedMph > 50, BallLaunchAngleDeg > 5, BallLaunchAngleDeg < 30, BallSideAngleDeg < 10, BallSideAngleDeg > -10, BallBackSpinRpm > 1000, BallBackSpinRpm < 9000, BallSideSpinRpm < 3000, BallSideSpinRpm > -3000)
#select features
data <- Data_Engage_Quad_Carlsbad_Iron_Select %>% select(ClubFamilyName, ImpactHeadSpeedMph, BallSpeedMph, BallLaunchAngleDeg, BallSideAngleDeg, BallBackSpinRpm, BallSideSpinRpm)
#unique features
data <- unique(data)
#manualing scaling specific features
#data <- data %>% mutate(value = 1)  %>% spread(ClubFamilyName, value,  fill = 0)
#maxs <- apply(data%>% select(where(is.numeric)), 2, max)
#mins <- apply(data%>% select(where(is.numeric)), 2, min)
#data_scaled <- as.data.frame(scale(data%>% select(where(is.numeric)), center = mins, scale = maxs - mins))
#dummy code for neural net
data <- data %>% mutate(value = 1)  %>% spread(ClubFamilyName, value,  fill = 0)
#subset into train and test
inTrain <- createDataPartition(
y = data$ImpactHeadSpeedMph,
times = 1,
p = .80,
list = FALSE
)
training <- data[ inTrain,]
testing  <- data[-inTrain,]
Q_test_data <- data.frame(Ball.Speed.quad = Data.Combined.7I %>% filter(Player == "Quenten Hooker") %>% summarise(mean(Ball.Speed.quad)),
Launch.Angle.quad = Data.Combined.7I %>% filter(Player == "Quenten Hooker") %>% summarise(mean(Launch.Angle.quad)),
Side.Angle.quad = Data.Combined.7I %>% filter(Player == "Quenten Hooker") %>% summarise(mean(Side.Angle.quad)),
Back.Spin.quad = Data.Combined.7I %>% filter(Player == "Quenten Hooker") %>% summarise(mean(Back.Spin.quad)),
Side.Spin.quad = Data.Combined.7I %>% filter(Player == "Quenten Hooker") %>% summarise(mean(Side.Spin.quad)),
APEX_21 = 0,
APEX_DCB_21 = 0,
APEX_MB_21 = 1,
APEX_PRO_21 = 0,
APEX_TCB_21 = 0)
colnames(Q_test_data) <- c("BallSpeedMph", "BallLaunchAngleDeg", "BallSideAngleDeg", "BallBackSpinRpm", "BallSideSpinRpm", "APEX_21", "APEX_DCB_21", "APEX_MB_21", "APEX_PRO_21", "APEX_TCB_21")
registerDoMC(cores=4)
#models tried, xgbLinear, xgbtree, ols, mem, randforest, neuralnet
tune.grid.neuralnet <- expand.grid(
layer1 = c(1:5), # first hidden layer, from 1 to 5 neurons
layer2 = c(0:2), # second hidden layer, from 0 to 5 neurons
layer3 = c(0:2)  # third hidden layer, from 0 to 5 neurons
)
training
system.time(model <- caret::train(ImpactHeadSpeedMph ~ ., data = training, method = "neuralnet",
preProcess = c("center", "scale"), # data preprocessing
tuneGrid = tune.grid.neuralnet, #dataframe of tunning values
metric = "RMSE", #summary metric for selecting the optimal model
stepmax = 100000, #maximum steps for the training
learningrate = 0.01, #amount that the weights are updated during training
threshold = 2,
# preProcess = list(center = c("ImpactHeadSpeedMph", "BallSpeedMph", "BallLaunchAngleDeg", "BallSideAngleDeg",
#                                 "BallBackSpinRpm", "BallSideSpinRpm"),
#                      scale = c("ImpactHeadSpeedMph", "BallSpeedMph", "BallLaunchAngleDeg", "BallSideAngleDeg",
#                                 "BallBackSpinRpm", "BallSideSpinRpm")),
#linout = TRUE,
trControl = trainControl(method = 'cv', number = 2, verboseIter = TRUE)
))
class(model)
print(model)
saveRDS(model, file = "nn.rda")
plotnet(model, pad_x = .5)
result_predict <- predict(model,testing, na.action = na.omit)
tune.grid.neuralnet <- expand.grid(
layer1 = c(1:10), # first hidden layer, from 1 to 5 neurons
layer2 = c(0), # second hidden layer, from 0 to 5 neurons
layer3 = c(0)  # third hidden layer, from 0 to 5 neurons
)
system.time(model <- caret::train(ImpactHeadSpeedMph ~ ., data = training, method = "neuralnet",
preProcess = c("center", "scale"), # data preprocessing
tuneGrid = tune.grid.neuralnet, #dataframe of tunning values
metric = "RMSE", #summary metric for selecting the optimal model
stepmax = 100000, #maximum steps for the training
learningrate = 0.01, #amount that the weights are updated during training
threshold = 2,
# preProcess = list(center = c("ImpactHeadSpeedMph", "BallSpeedMph", "BallLaunchAngleDeg", "BallSideAngleDeg",
#                                 "BallBackSpinRpm", "BallSideSpinRpm"),
#                      scale = c("ImpactHeadSpeedMph", "BallSpeedMph", "BallLaunchAngleDeg", "BallSideAngleDeg",
#                                 "BallBackSpinRpm", "BallSideSpinRpm")),
#linout = TRUE,
trControl = trainControl(method = 'cv', number = 2, verboseIter = TRUE)
))
class(model)
plot(model)
plotnet(model, pad_x = .5)
print(model)
plotnet(model, pad_x = .5)
result_predict <- predict(model,testing, na.action = na.omit)
saveRDS(model, file = "nn_test.rda")
class(model)
class(model$bestTune)
model$bestTune
class(model$finalModel)
plotnet(model$finalModel, pad_x = .5)
#result_predict_unscaled <- result_predict * ((max(data$ImpactHeadSpeedMph)-min(data$ImpactHeadSpeedMph))+min(data$ImpactHeadSpeedMph))
predict(model, Q_test_data)
result_predict <- predict(model,testing, na.action = na.omit)
print(model)
print(model$perfNames)
print(model$ptype)
print(model$results)
plot(model)
#models tried, xgbLinear, xgbtree, ols, mem, randforest, neuralnet
tune.grid.neuralnet <- expand.grid(
layer1 = c(10), # first hidden layer, from 1 to 5 neurons
layer2 = c(0), # second hidden layer, from 0 to 5 neurons
layer3 = c(0)  # third hidden layer, from 0 to 5 neurons
)
system.time(model <- caret::train(ImpactHeadSpeedMph ~ ., data = training, method = "neuralnet",
preProcess = c("center", "scale"), # data preprocessing
tuneGrid = tune.grid.neuralnet, #dataframe of tunning values
metric = "RMSE", #summary metric for selecting the optimal model
stepmax = 100000, #maximum steps for the training
learningrate = 0.01, #amount that the weights are updated during training
threshold = 2,
# preProcess = list(center = c("ImpactHeadSpeedMph", "BallSpeedMph", "BallLaunchAngleDeg", "BallSideAngleDeg",
#                                 "BallBackSpinRpm", "BallSideSpinRpm"),
#                      scale = c("ImpactHeadSpeedMph", "BallSpeedMph", "BallLaunchAngleDeg", "BallSideAngleDeg",
#                                 "BallBackSpinRpm", "BallSideSpinRpm")),
#linout = TRUE,
trControl = trainControl(method = 'cv', number = 2, verboseIter = TRUE)
))
#models tried, xgbLinear, xgbtree, ols, mem, randforest, neuralnet
tune.grid.neuralnet <- expand.grid(
layer1 = c(5), # first hidden layer, from 1 to 5 neurons
layer2 = c(0), # second hidden layer, from 0 to 5 neurons
layer3 = c(0)  # third hidden layer, from 0 to 5 neurons
)
system.time(model <- caret::train(ImpactHeadSpeedMph ~ ., data = training, method = "neuralnet",
preProcess = c("center", "scale"), # data preprocessing
tuneGrid = tune.grid.neuralnet, #dataframe of tunning values
metric = "RMSE", #summary metric for selecting the optimal model
stepmax = 100000, #maximum steps for the training
learningrate = 0.01, #amount that the weights are updated during training
threshold = 2,
# preProcess = list(center = c("ImpactHeadSpeedMph", "BallSpeedMph", "BallLaunchAngleDeg", "BallSideAngleDeg",
#                                 "BallBackSpinRpm", "BallSideSpinRpm"),
#                      scale = c("ImpactHeadSpeedMph", "BallSpeedMph", "BallLaunchAngleDeg", "BallSideAngleDeg",
#                                 "BallBackSpinRpm", "BallSideSpinRpm")),
#linout = TRUE,
trControl = trainControl(method = 'cv', number = 2, verboseIter = TRUE)
))
#library('tidyverse')
library('neuralnet')
Data_Engage_Quad_Carlsbad_Iron_Select <- Data_Engage_Quad_Carlsbad %>% filter(CategoryName == "Irons", ClubFamilyName == "APEX TCB 21" | ClubFamilyName == "APEX 21" | ClubFamilyName == "APEX DCB 21" | ClubFamilyName == "APEX PRO 21 IRONS" | ClubFamilyName == "APEX MB 21")
Data_Engage_Quad_Carlsbad_Iron_Select$ClubFamilyName[Data_Engage_Quad_Carlsbad_Iron_Select$ClubFamilyName == "APEX TCB 21" ] <- "APEX_TCB_21"
Data_Engage_Quad_Carlsbad_Iron_Select$ClubFamilyName[Data_Engage_Quad_Carlsbad_Iron_Select$ClubFamilyName == "APEX 21" ] <- "APEX_21"
Data_Engage_Quad_Carlsbad_Iron_Select$ClubFamilyName[Data_Engage_Quad_Carlsbad_Iron_Select$ClubFamilyName == "APEX DCB 21" ] <- "APEX_DCB_21"
Data_Engage_Quad_Carlsbad_Iron_Select$ClubFamilyName[Data_Engage_Quad_Carlsbad_Iron_Select$ClubFamilyName == "APEX PRO 21 IRONS" ] <- "APEX_PRO_21"
Data_Engage_Quad_Carlsbad_Iron_Select$ClubFamilyName[Data_Engage_Quad_Carlsbad_Iron_Select$ClubFamilyName == "APEX MB 21" ] <- "APEX_MB_21"
Data_Engage_Quad_Carlsbad_Iron_Select <- Data_Engage_Quad_Carlsbad_Iron_Select %>% filter(!is.na(ClubFamilyName), !is.na(ImpactHeadSpeedMph))
Data_Engage_Quad_Carlsbad_Iron_Select <- Data_Engage_Quad_Carlsbad_Iron_Select %>% filter(SmashFactor > 1, SmashFactor < 1.4, ImpactHeadSpeedMph < 110, ImpactHeadSpeedMph > 50, BallLaunchAngleDeg > 5, BallLaunchAngleDeg < 30, BallSideAngleDeg < 10, BallSideAngleDeg > -10, BallBackSpinRpm > 1000, BallBackSpinRpm < 9000, BallSideSpinRpm < 3000, BallSideSpinRpm > -3000)
data <- Data_Engage_Quad_Carlsbad_Iron_Select %>% select(ClubFamilyName, ImpactHeadSpeedMph, BallSpeedMph, BallLaunchAngleDeg, BallSideAngleDeg, BallBackSpinRpm, BallSideSpinRpm)
data <- unique(data)
#summary(data)
data <- data %>% mutate(value = 1)  %>% spread(ClubFamilyName, value,  fill = 0)
#check for NAs
apply(data,2,function(x) sum(is.na(x)))
index <- sample(1:nrow(data),round(0.75*nrow(data)))
train <- data[index,]
test <- data[-index,]
lm.fit <- glm(ImpactHeadSpeedMph~., data=train)
summary(lm.fit)
pr.lm <- predict(lm.fit,test)
MSE.lm <- sum((pr.lm - test$ImpactHeadSpeedMph)^2)/nrow(test)
rmse.lm <- sqrt(mean((pr.lm - test$ImpactHeadSpeedMph)^2))
maxs <- apply(data, 2, max)
mins <- apply(data, 2, min)
scaled <- as.data.frame(scale(data, center = mins, scale = maxs - mins))
train_ <- scaled[index,]
test_ <- scaled[-index,]
n <- names(train_)
lhsOfFormula <- "ImpactHeadSpeedMph"
rhsOfFormula  <- paste(n[!n %in% "ImpactHeadSpeedMph"])
ns <- sapply(c(lhsOfFormula, rhsOfFormula), as.name)
f <- formula(paste(ns[1], paste(ns[-1], collapse="+"), sep=" ~ "))
#nn <- neuralnet(f,data=train_,hidden=c(5,3),linear.output=T)
nn <- neuralnet(formula = f, data = train_, hidden = 5, threshold = 2.0,
stepmax = 1e+06, rep = 1, startweights = NULL,
#learningrate.limit = NULL,
#learningrate.factor = list(minus = 0.5,  plus = 1.2),
learningrate = NULL, lifesign = "minimal",
lifesign.step = 1000, algorithm = "rprop+", err.fct = "sse",
act.fct = "logistic", linear.output = TRUE, exclude = NULL,
constant.weights = NULL, likelihood = FALSE)
plot(nn)
pr.nn <- compute(nn,test_[,1:11])
pr.nn_ <- pr.nn$net.result*(max(data$ImpactHeadSpeedMph)-min(data$ImpactHeadSpeedMph))+min(data$ImpactHeadSpeedMph)
test.r <- (test_$ImpactHeadSpeedMph)*(max(data$ImpactHeadSpeedMph)-min(data$ImpactHeadSpeedMph))+min(data$ImpactHeadSpeedMph)
MSE.nn <- sum((test.r - pr.nn_)^2)/nrow(test_)
rmse.nn <- sqrt(mean((test.r - pr.nn_)^2))
print(paste(MSE.lm,MSE.nn))
print(paste(rmse.lm,rmse.nn))
par(mfrow=c(1,2))
plot(test$ImpactHeadSpeedMph,pr.nn_,col='red',main='Real vs predicted NN',pch=18,cex=0.7)
abline(0,1,lwd=2)
legend('bottomright',legend='NN',pch=18,col='red', bty='n')
plot(test$ImpactHeadSpeedMph,pr.lm,col='blue',main='Real vs predicted lm',pch=18, cex=0.7)
abline(0,1,lwd=2)
legend('bottomright',legend='LM',pch=18,col='blue', bty='n', cex=.95)
plot(test$ImpactHeadSpeedMph,pr.nn_,col='red',main='Real vs predicted NN',pch=18,cex=0.7)
points(test$ImpactHeadSpeedMph,pr.lm,col='blue',pch=18,cex=0.7)
abline(0,1,lwd=2)
legend('bottomright',legend=c('NN','LM'),pch=18,col=c('red','blue'))
#library('tidyverse')
library('neuralnet')
Data_Engage_Quad_Carlsbad_Iron_Select <- Data_Engage_Quad_Carlsbad %>% filter(CategoryName == "Irons", ClubFamilyName == "APEX TCB 21" | ClubFamilyName == "APEX 21" | ClubFamilyName == "APEX DCB 21" | ClubFamilyName == "APEX PRO 21 IRONS" | ClubFamilyName == "APEX MB 21")
Data_Engage_Quad_Carlsbad_Iron_Select$ClubFamilyName[Data_Engage_Quad_Carlsbad_Iron_Select$ClubFamilyName == "APEX TCB 21" ] <- "APEX_TCB_21"
Data_Engage_Quad_Carlsbad_Iron_Select$ClubFamilyName[Data_Engage_Quad_Carlsbad_Iron_Select$ClubFamilyName == "APEX 21" ] <- "APEX_21"
Data_Engage_Quad_Carlsbad_Iron_Select$ClubFamilyName[Data_Engage_Quad_Carlsbad_Iron_Select$ClubFamilyName == "APEX DCB 21" ] <- "APEX_DCB_21"
Data_Engage_Quad_Carlsbad_Iron_Select$ClubFamilyName[Data_Engage_Quad_Carlsbad_Iron_Select$ClubFamilyName == "APEX PRO 21 IRONS" ] <- "APEX_PRO_21"
Data_Engage_Quad_Carlsbad_Iron_Select$ClubFamilyName[Data_Engage_Quad_Carlsbad_Iron_Select$ClubFamilyName == "APEX MB 21" ] <- "APEX_MB_21"
Data_Engage_Quad_Carlsbad_Iron_Select <- Data_Engage_Quad_Carlsbad_Iron_Select %>% filter(!is.na(ClubFamilyName), !is.na(ImpactHeadSpeedMph))
Data_Engage_Quad_Carlsbad_Iron_Select <- Data_Engage_Quad_Carlsbad_Iron_Select %>% filter(SmashFactor > 1, SmashFactor < 1.4, ImpactHeadSpeedMph < 110, ImpactHeadSpeedMph > 50, BallLaunchAngleDeg > 5, BallLaunchAngleDeg < 30, BallSideAngleDeg < 10, BallSideAngleDeg > -10, BallBackSpinRpm > 1000, BallBackSpinRpm < 9000, BallSideSpinRpm < 3000, BallSideSpinRpm > -3000)
data <- Data_Engage_Quad_Carlsbad_Iron_Select %>% select(ClubFamilyName, ImpactHeadSpeedMph, BallSpeedMph, BallLaunchAngleDeg, BallSideAngleDeg, BallBackSpinRpm, BallSideSpinRpm)
data <- unique(data)
#summary(data)
data <- data %>% mutate(value = 1)  %>% spread(ClubFamilyName, value,  fill = 0)
#check for NAs
apply(data,2,function(x) sum(is.na(x)))
index <- sample(1:nrow(data),round(0.75*nrow(data)))
train <- data[index,]
test <- data[-index,]
lm.fit <- glm(ImpactHeadSpeedMph~., data=train)
summary(lm.fit)
pr.lm <- predict(lm.fit,test)
MSE.lm <- sum((pr.lm - test$ImpactHeadSpeedMph)^2)/nrow(test)
rmse.lm <- sqrt(mean((pr.lm - test$ImpactHeadSpeedMph)^2))
maxs <- apply(data, 2, max)
mins <- apply(data, 2, min)
scaled <- as.data.frame(scale(data, center = mins, scale = maxs - mins))
train_ <- scaled[index,]
test_ <- scaled[-index,]
n <- names(train_)
lhsOfFormula <- "ImpactHeadSpeedMph"
rhsOfFormula  <- paste(n[!n %in% "ImpactHeadSpeedMph"])
ns <- sapply(c(lhsOfFormula, rhsOfFormula), as.name)
f <- formula(paste(ns[1], paste(ns[-1], collapse="+"), sep=" ~ "))
#nn <- neuralnet(f,data=train_,hidden=c(5,3),linear.output=T)
nn <- neuralnet(formula = f, data = train_, hidden = 5, threshold = 0.01,
stepmax = 1e+06, rep = 1, startweights = NULL,
#learningrate.limit = NULL,
#learningrate.factor = list(minus = 0.5,  plus = 1.2),
learningrate = NULL, lifesign = "minimal",
lifesign.step = 1000, algorithm = "rprop+", err.fct = "sse",
act.fct = "logistic", linear.output = TRUE, exclude = NULL,
constant.weights = NULL, likelihood = FALSE)
plot(nn)
pr.nn <- compute(nn,test_[,1:11])
pr.nn_ <- pr.nn$net.result*(max(data$ImpactHeadSpeedMph)-min(data$ImpactHeadSpeedMph))+min(data$ImpactHeadSpeedMph)
test.r <- (test_$ImpactHeadSpeedMph)*(max(data$ImpactHeadSpeedMph)-min(data$ImpactHeadSpeedMph))+min(data$ImpactHeadSpeedMph)
MSE.nn <- sum((test.r - pr.nn_)^2)/nrow(test_)
rmse.nn <- sqrt(mean((test.r - pr.nn_)^2))
print(paste(MSE.lm,MSE.nn))
print(paste(rmse.lm,rmse.nn))
par(mfrow=c(1,2))
plot(test$ImpactHeadSpeedMph,pr.nn_,col='red',main='Real vs predicted NN',pch=18,cex=0.7)
abline(0,1,lwd=2)
legend('bottomright',legend='NN',pch=18,col='red', bty='n')
plot(test$ImpactHeadSpeedMph,pr.lm,col='blue',main='Real vs predicted lm',pch=18, cex=0.7)
abline(0,1,lwd=2)
legend('bottomright',legend='LM',pch=18,col='blue', bty='n', cex=.95)
plot(test$ImpactHeadSpeedMph,pr.nn_,col='red',main='Real vs predicted NN',pch=18,cex=0.7)
points(test$ImpactHeadSpeedMph,pr.lm,col='blue',pch=18,cex=0.7)
abline(0,1,lwd=2)
legend('bottomright',legend=c('NN','LM'),pch=18,col=c('red','blue'))
class(nn)
saveRDS(nn, file = "nn_5_test.rda")
model <- readRDS(file = "nn_5_test.rda")
class(model$finalModel)
plot(model)
print(model)
plotnet(model, pad_x = .5)
result_predict <- predict(model,testing, na.action = na.omit)
#result_predict_unscaled <- result_predict * ((max(data$ImpactHeadSpeedMph)-min(data$ImpactHeadSpeedMph))+min(data$ImpactHeadSpeedMph))
predict(model, Q_test_data)
Data.Combined.7I %>% filter(Player == "Quenten Hooker") %>% summarise(mean(Club.Speed.quad))
predict(model, Q_test_data)
Data.Combined.7I %>% filter(Player == "Quenten Hooker") %>% summarise(mean(Club.Speed.quad))
#saveRDS(model, file = "nn_test.rda")
model <- readRDS(file = "nn.rda")
class(model$finalModel)
plot(model)
print(model)
print(model)
print(model$results)
plotnet(model, pad_x = .5)
plotnet(model, pad_x = .5)
print(model)
#saveRDS(model, file = "nn_test.rda")
model <- readRDS(file = "nn_test.rda")
class(model$finalModel)
plot(model)
plot(model)
print(model)
plotnet(model, pad_x = .5)
model$wts
model$row_nms
model$resample
model$preProcess
model$dots
model
system.time(model <- caret::train(ImpactHeadSpeedMph ~ ., data = training, method = "mlpML",
preProcess = c("center", "scale"), # data preprocessing
tuneGrid = tune.grid.neuralnet, #dataframe of tunning values
metric = "RMSE", #summary metric for selecting the optimal model
stepmax = 100000, #maximum steps for the training
learningrate = 0.01, #amount that the weights are updated during training
threshold = 2,
# preProcess = list(center = c("ImpactHeadSpeedMph", "BallSpeedMph", "BallLaunchAngleDeg", "BallSideAngleDeg",
#                                 "BallBackSpinRpm", "BallSideSpinRpm"),
#                      scale = c("ImpactHeadSpeedMph", "BallSpeedMph", "BallLaunchAngleDeg", "BallSideAngleDeg",
#                                 "BallBackSpinRpm", "BallSideSpinRpm")),
#linout = TRUE,
trControl = trainControl(method = 'cv', number = 1, verboseIter = TRUE)
))
system.time(model <- caret::train(ImpactHeadSpeedMph ~ ., data = training, method = "mlpML",
preProcess = c("center", "scale"), # data preprocessing
#tuneGrid = tune.grid.neuralnet, #dataframe of tunning values
metric = "RMSE", #summary metric for selecting the optimal model
stepmax = 100000, #maximum steps for the training
learningrate = 0.01, #amount that the weights are updated during training
threshold = 2,
# preProcess = list(center = c("ImpactHeadSpeedMph", "BallSpeedMph", "BallLaunchAngleDeg", "BallSideAngleDeg",
#                                 "BallBackSpinRpm", "BallSideSpinRpm"),
#                      scale = c("ImpactHeadSpeedMph", "BallSpeedMph", "BallLaunchAngleDeg", "BallSideAngleDeg",
#                                 "BallBackSpinRpm", "BallSideSpinRpm")),
#linout = TRUE,
trControl = trainControl(method = 'cv', number = 1, verboseIter = TRUE)
))
system.time(model <- caret::train(ImpactHeadSpeedMph ~ ., data = training, method = "mlpML",
preProcess = c("center", "scale"), # data preprocessing
#tuneGrid = tune.grid.neuralnet, #dataframe of tunning values
#metric = "RMSE", #summary metric for selecting the optimal model
#stepmax = 100000, #maximum steps for the training
#learningrate = 0.01, #amount that the weights are updated during training
#threshold = 2,
# preProcess = list(center = c("ImpactHeadSpeedMph", "BallSpeedMph", "BallLaunchAngleDeg", "BallSideAngleDeg",
#                                 "BallBackSpinRpm", "BallSideSpinRpm"),
#                      scale = c("ImpactHeadSpeedMph", "BallSpeedMph", "BallLaunchAngleDeg", "BallSideAngleDeg",
#                                 "BallBackSpinRpm", "BallSideSpinRpm")),
#linout = TRUE,
trControl = trainControl(method = 'cv', number = 1, verboseIter = TRUE)
))
system.time(model <- caret::train(ImpactHeadSpeedMph ~ ., data = training, method = "mlpML",
preProcess = c("center", "scale"), # data preprocessing
#tuneGrid = tune.grid.neuralnet, #dataframe of tunning values
#metric = "RMSE", #summary metric for selecting the optimal model
#stepmax = 100000, #maximum steps for the training
#learningrate = 0.01, #amount that the weights are updated during training
#threshold = 2,
# preProcess = list(center = c("ImpactHeadSpeedMph", "BallSpeedMph", "BallLaunchAngleDeg", "BallSideAngleDeg",
#                                 "BallBackSpinRpm", "BallSideSpinRpm"),
#                      scale = c("ImpactHeadSpeedMph", "BallSpeedMph", "BallLaunchAngleDeg", "BallSideAngleDeg",
#                                 "BallBackSpinRpm", "BallSideSpinRpm")),
#linout = TRUE,
#trControl = trainControl(method = 'cv', number = 1, verboseIter = TRUE)
))
print(model)
set.seed(1)
#select correct clubs
Data_Engage_Quad_Carlsbad_Iron_Select <- Data_Engage_Quad_Carlsbad %>% filter(CategoryName == "Irons", ClubFamilyName == "APEX TCB 21" | ClubFamilyName == "APEX 21" | ClubFamilyName == "APEX DCB 21" | ClubFamilyName == "APEX PRO 21 IRONS" | ClubFamilyName == "APEX MB 21")
#rename clubs
Data_Engage_Quad_Carlsbad_Iron_Select$ClubFamilyName[Data_Engage_Quad_Carlsbad_Iron_Select$ClubFamilyName == "APEX TCB 21" ] <- "APEX_TCB_21"
Data_Engage_Quad_Carlsbad_Iron_Select$ClubFamilyName[Data_Engage_Quad_Carlsbad_Iron_Select$ClubFamilyName == "APEX 21" ] <- "APEX_21"
Data_Engage_Quad_Carlsbad_Iron_Select$ClubFamilyName[Data_Engage_Quad_Carlsbad_Iron_Select$ClubFamilyName == "APEX DCB 21" ] <- "APEX_DCB_21"
Data_Engage_Quad_Carlsbad_Iron_Select$ClubFamilyName[Data_Engage_Quad_Carlsbad_Iron_Select$ClubFamilyName == "APEX PRO 21 IRONS" ] <- "APEX_PRO_21"
Data_Engage_Quad_Carlsbad_Iron_Select$ClubFamilyName[Data_Engage_Quad_Carlsbad_Iron_Select$ClubFamilyName == "APEX MB 21" ] <- "APEX_MB_21"
#remove NA
Data_Engage_Quad_Carlsbad_Iron_Select <- Data_Engage_Quad_Carlsbad_Iron_Select %>% filter(!is.na(ClubFamilyName), !is.na(ImpactHeadSpeedMph))
#plot to check outliers
ggplot(Data_Engage_Quad_Carlsbad_Iron_Select, aes(x = SmashFactor)) + geom_histogram(aes(y = ..density..), colour = 1, fill = "white") +  geom_density()
ggplot(Data_Engage_Quad_Carlsbad_Iron_Select, aes(x = ImpactHeadSpeedMph)) + geom_histogram(aes(y = ..density..), colour = 1, fill = "white") +  geom_density()
ggplot(Data_Engage_Quad_Carlsbad_Iron_Select, aes(x = BallSpeedMph)) + geom_histogram(aes(y = ..density..), colour = 1, fill = "white") +  geom_density()
ggplot(Data_Engage_Quad_Carlsbad_Iron_Select, aes(x = BallLaunchAngleDeg)) + geom_histogram(aes(y = ..density..), colour = 1, fill = "white") +  geom_density()
ggplot(Data_Engage_Quad_Carlsbad_Iron_Select, aes(x = BallSideAngleDeg)) + geom_histogram(aes(y = ..density..), colour = 1, fill = "white") +  geom_density()
ggplot(Data_Engage_Quad_Carlsbad_Iron_Select, aes(x = BallBackSpinRpm)) + geom_histogram(aes(y = ..density..), colour = 1, fill = "white") +  geom_density()
ggplot(Data_Engage_Quad_Carlsbad_Iron_Select, aes(x = BallSideSpinRpm)) + geom_histogram(aes(y = ..density..), colour = 1, fill = "white") +  geom_density()
#remove bounds
Data_Engage_Quad_Carlsbad_Iron_Select <- Data_Engage_Quad_Carlsbad_Iron_Select %>% filter(SmashFactor > 1, SmashFactor < 1.4, ImpactHeadSpeedMph < 110, ImpactHeadSpeedMph > 50, BallLaunchAngleDeg > 5, BallLaunchAngleDeg < 30, BallSideAngleDeg < 10, BallSideAngleDeg > -10, BallBackSpinRpm > 1000, BallBackSpinRpm < 9000, BallSideSpinRpm < 3000, BallSideSpinRpm > -3000)
#select features
data <- Data_Engage_Quad_Carlsbad_Iron_Select %>% select(ClubFamilyName, ImpactHeadSpeedMph, BallSpeedMph, BallLaunchAngleDeg, BallSideAngleDeg, BallBackSpinRpm, BallSideSpinRpm)
#unique features
data <- unique(data)
#manualing scaling specific features
#data <- data %>% mutate(value = 1)  %>% spread(ClubFamilyName, value,  fill = 0)
#maxs <- apply(data%>% select(where(is.numeric)), 2, max)
#mins <- apply(data%>% select(where(is.numeric)), 2, min)
#data_scaled <- as.data.frame(scale(data%>% select(where(is.numeric)), center = mins, scale = maxs - mins))
#dummy code for neural net
data <- data %>% mutate(value = 1)  %>% spread(ClubFamilyName, value,  fill = 0)
#subset into train and test
inTrain <- createDataPartition(
y = data$ImpactHeadSpeedMph,
times = 1,
p = .80,
list = FALSE
)
training <- data[ inTrain,]
testing  <- data[-inTrain,]
Q_test_data <- data.frame(Ball.Speed.quad = Data.Combined.7I %>% filter(Player == "Quenten Hooker") %>% summarise(mean(Ball.Speed.quad)),
Launch.Angle.quad = Data.Combined.7I %>% filter(Player == "Quenten Hooker") %>% summarise(mean(Launch.Angle.quad)),
Side.Angle.quad = Data.Combined.7I %>% filter(Player == "Quenten Hooker") %>% summarise(mean(Side.Angle.quad)),
Back.Spin.quad = Data.Combined.7I %>% filter(Player == "Quenten Hooker") %>% summarise(mean(Back.Spin.quad)),
Side.Spin.quad = Data.Combined.7I %>% filter(Player == "Quenten Hooker") %>% summarise(mean(Side.Spin.quad)),
APEX_21 = 0,
APEX_DCB_21 = 0,
APEX_MB_21 = 1,
APEX_PRO_21 = 0,
APEX_TCB_21 = 0)
colnames(Q_test_data) <- c("BallSpeedMph", "BallLaunchAngleDeg", "BallSideAngleDeg", "BallBackSpinRpm", "BallSideSpinRpm", "APEX_21", "APEX_DCB_21", "APEX_MB_21", "APEX_PRO_21", "APEX_TCB_21")
registerDoMC(cores=4)
#models tried, xgbLinear, xgbtree, ols, mem, randforest, neuralnet
tune.grid.neuralnet <- expand.grid(
layer1 = c(5), # first hidden layer, from 1 to 5 neurons
layer2 = c(0), # second hidden layer, from 0 to 5 neurons
layer3 = c(0)  # third hidden layer, from 0 to 5 neurons
)
system.time(model <- caret::train(ImpactHeadSpeedMph ~ ., data = training, method = "neuralnet",
preProcess = c("scale"), # data preprocessing
tuneGrid = tune.grid.neuralnet, #dataframe of tunning values
metric = "RMSE", #summary metric for selecting the optimal model
stepmax = 100000, #maximum steps for the training
learningrate = 0.01, #amount that the weights are updated during training
threshold = 3,
# preProcess = list(center = c("ImpactHeadSpeedMph", "BallSpeedMph", "BallLaunchAngleDeg", "BallSideAngleDeg",
#                                 "BallBackSpinRpm", "BallSideSpinRpm"),
#                      scale = c("ImpactHeadSpeedMph", "BallSpeedMph", "BallLaunchAngleDeg", "BallSideAngleDeg",
#                                 "BallBackSpinRpm", "BallSideSpinRpm")),
#linout = TRUE,
trControl = trainControl(method = 'cv', number = 2, verboseIter = TRUE)
))
class(model)
plot(model)
print(model)
print(model$results)
#models tried, xgbLinear, xgbtree, ols, mem, randforest, neuralnet
tune.grid.neuralnet <- expand.grid(
layer1 = c(5), # first hidden layer, from 1 to 5 neurons
layer2 = c(0), # second hidden layer, from 0 to 5 neurons
layer3 = c(0)  # third hidden layer, from 0 to 5 neurons
)
system.time(model <- caret::train(ImpactHeadSpeedMph ~ ., data = training, method = "neuralnet",
preProcess = c("scale"), # data preprocessing
tuneGrid = tune.grid.neuralnet, #dataframe of tunning values
metric = "RMSE", #summary metric for selecting the optimal model
stepmax = 100000, #maximum steps for the training
learningrate = 0.01, #amount that the weights are updated during training
threshold = 2,
# preProcess = list(center = c("ImpactHeadSpeedMph", "BallSpeedMph", "BallLaunchAngleDeg", "BallSideAngleDeg",
#                                 "BallBackSpinRpm", "BallSideSpinRpm"),
#                      scale = c("ImpactHeadSpeedMph", "BallSpeedMph", "BallLaunchAngleDeg", "BallSideAngleDeg",
#                                 "BallBackSpinRpm", "BallSideSpinRpm")),
#linout = TRUE,
trControl = trainControl(method = 'cv', number = 2, verboseIter = TRUE)
))
print(model)
training
model$trainingData
#models tried, xgbLinear, xgbtree, ols, mem, randforest, neuralnet
tune.grid.neuralnet <- expand.grid(
layer1 = c(5), # first hidden layer, from 1 to 5 neurons
layer2 = c(0), # second hidden layer, from 0 to 5 neurons
layer3 = c(0)  # third hidden layer, from 0 to 5 neurons
)
system.time(model <- caret::train(ImpactHeadSpeedMph ~ ., data = training, method = "neuralnet",
preProcess = c("scale", "center"), # data preprocessing
tuneGrid = tune.grid.neuralnet, #dataframe of tunning values
metric = "RMSE", #summary metric for selecting the optimal model
stepmax = 100000, #maximum steps for the training
learningrate = 0.01, #amount that the weights are updated during training
threshold = 2,
# preProcess = list(center = c("ImpactHeadSpeedMph", "BallSpeedMph", "BallLaunchAngleDeg", "BallSideAngleDeg",
#                                 "BallBackSpinRpm", "BallSideSpinRpm"),
#                      scale = c("ImpactHeadSpeedMph", "BallSpeedMph", "BallLaunchAngleDeg", "BallSideAngleDeg",
#                                 "BallBackSpinRpm", "BallSideSpinRpm")),
#linout = TRUE,
trControl = trainControl(method = 'cv', number = 2, verboseIter = TRUE)
))
