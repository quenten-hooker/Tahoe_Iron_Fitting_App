new_data <- data.frame(Player = rep(levels(Data.Combined.train$Player)[1], 16*nlevels(Data.Combined.train$Club)),
Length = rep(sort(unique(Data.Combined.train$Length)), each = 16),
Tags = rep(rep(levels(Data.Combined.train$Tags), each = 8), 6),
Club.Speed.quad = rep(mean(na.omit(Data.Combined.train$Club.Speed.quad)), nlevels(Data.Combined.train$Club)),
Angle.Of.Attack.quad = rep(mean(na.omit(Data.Combined.train$Angle.Of.Attack.quad)), nlevels(Data.Combined.train$Club)),
Face.To.Target.quad = rep(mean(na.omit(Data.Combined.train$Face.To.Target.quad)), nlevels(Data.Combined.train$Club)),
Club.Path.quad = rep(mean(na.omit(Data.Combined.train$Club.Path.quad)), nlevels(Data.Combined.train$Club)),
Face.To.Path.quad = rep(mean(na.omit(Data.Combined.train$Face.To.Path.quad)), nlevels(Data.Combined.train$Club)),
Loft.quad = rep(mean(na.omit(Data.Combined.train$Loft.quad)), nlevels(Data.Combined.train$Club)),
Lie.quad = rep(mean(na.omit(Data.Combined.train$Lie.quad)), nlevels(Data.Combined.train$Club)),
Lateral.Face.quad = rep(rep(Lateral.Impact.GMM, nlevels(Data.Combined.train$Tags)), nlevels(Data.Combined.train$Club)),
Vertical.Face.quad = rep(rep(Vertical.Impact.GMM, nlevels(Data.Combined.train$Tags)), nlevels(Data.Combined.train$Club)))
predict_data = c()
predict_data$Tags = rep(rep(levels(Data.Combined.train$Tags), each = 8), 6)
predict_data$Length = rep(sort(unique(Data.Combined.train$Length)), each = 16)
predict_data$Ball.Speed <- predict(lm.Ball.Speed.normalize, re.form= NA, newdata = new_data)
predict_data$Back.Spin <- predict(lm.Back.Spin.normalize, re.form= NA, newdata = new_data)
predict_data$Launch.Angle <- predict(lm.Launch.Angle.normalize, re.form= NA, newdata = new_data)
predict_data$Side.Spin <- predict(lm.Side.Spin.normalize, re.form= NA, newdata = new_data)
predict_data$Side.Angle <- predict(lm.Side.Angle.normalize, re.form= NA, newdata = new_data)
predict_data <- data.frame(predict_data)
#predict_data <- predict_data %>% filter(Length == 38)
model_col_names <- c("Tags", "Club", "speed-mph", "back_spin-rpm", "launch_angle-deg", "side_spin-rpm",
"side_angle-deg")
colnames(predict_data) <- as.character(model_col_names)
aero_data <- predict_data %>% select("speed-mph", "back_spin-rpm", "launch_angle-deg", "side_spin-rpm",
"side_angle-deg")
library(reticulate)
use_python("C:/Users/Quenten.hooker/AppData/Local/Programs/Python/Python39/python.exe", required=TRUE)
reticulate::repl_python()
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import interpolate
import downrange.downrange as downrange
demo = downrange.Downrange()
environment = {
'env_temp_F':  75, #[deg F]
'env_rh-percent' : 50, #[% relative humidity]
'env_pre-psi': 14.7, #[psi]
'gravity' : 9.8066352, #[m/s^2], value from Petrisor's code
'wind' : [0,0,0] #X,Y,Z - positive = downwind, __, __
}
ball_properties={
'ball_size-inch': 1.6822,
'ball_mass-g':45.538,
'ball_moi-ozins2': 0.0011609
}
aerosurfacepath='C:/Users/Quenten.hooker/AppData/Local/Programs/Python/Python39/Lib/site-packages/downrange/ITRdata/csx22-10313/'
demo = downrange.Downrange(
environment=environment,
ball_properties=ball_properties,
#aerosurfacepath=aerosurfacepath
)
#From model predictions
py_aero_predict = r.aero_data
test = []
for k, row in py_aero_predict.iterrows():
results = demo.predictdownrange(row)
test.append(results)
trajectory, results = zip(*test)
df = pd.DataFrame(results)
#df2 = pd.DataFrame(trajectory[1])
#df3 = pd.DataFrame(trajectory[31])
#df4 = pd.DataFrame(trajectory[61])
quit
df_1 <- data.frame(reticulate::py$df)
predict_data$Carry.aero <- df_1$carry_yd
predict_data$Offline.aero <- df_1$carryDisp_yd
#predict_data <- predict_data %>% group_by(Club) %>% mutate(obs = n()) %>% filter(obs > 5)
model_col_names <- c("Club", "Length", "Ball.Speed", "Back.Spin", "Launch.Angle", "Side.Spin", "Side.Angle", "Carry.aero", "Offline.aero")
colnames(predict_data) <- model_col_names
predict_data
predict_data_plot <- predict_data
predict_data_plot$Length[predict_data_plot$Length== 35.75] <- "PW"
predict_data_plot
predict_data_plot$Length[predict_data_plot$Length== 35.75] <- "PW"
predict_data_plot$Length[predict_data_plot$Length== 36.0] <- "9 Iron"
predict_data_plot$Length[predict_data_plot$Length== 36.5] <- "8 Iron"
predict_data_plot$Length[predict_data_plot$Length== 37.0] <- "7 Iron"
predict_data_plot$Length[predict_data_plot$Length== 37.5] <- "6 Iron"
predict_data_plot$Length[predict_data_plot$Length== 38.0] <- "5 Iron"
predict_data_plot <- within(predict_data, {
Club <- factor(Club)
Length <- factor(Length)
})
predict_data_plot
predict_data_plot <- within(predict_data_plot, {
Club <- factor(Club)
Length <- factor(Length)
})
predict_data_plot
predict_data_plot <- predict_data
predict_data_plot$Length[predict_data_plot$Length== 35.75] <- "PW"
predict_data_plot$Length[predict_data_plot$Length== 36.0] <- "9 Iron"
predict_data_plot$Length[predict_data_plot$Length== 36.5] <- "8 Iron"
predict_data_plot$Length[predict_data_plot$Length== 37.0] <- "7 Iron"
predict_data_plot$Length[predict_data_plot$Length== 37.5] <- "6 Iron"
predict_data_plot$Length[predict_data_plot$Length== 38.0] <- "5 Iron"
predict_data_plot <- within(predict_data_plot, {
Club <- factor(Club)
Length <- factor(Length)
})
predict_data_plot
ggplot(predict_data_plot,  aes(x = Offline.aero, y = Carry.aero, color = Length)) + geom_point()
predict_data_plot
#seed and norm vector
set.seed(6)#14
x <- rnorm(8, 0, 1)
Lateral.Impact.GMM <- scales::rescale(x, to = c(-15, 15), from = range(x))
set.seed(14)
y <- rnorm(8, 0, 1)
Vertical.Impact.GMM <- scales::rescale(y, to = c(-20, 0), from = range(y))
#test <- data.frame(Lateral.Impact.GMM, Vertical.Impact.GMM)
#ggplot(test, aes(Lateral.Impact.GMM, Vertical.Impact.GMM)) + geom_point()
new_data = c()
new_data <- data.frame(Player = rep(levels(Data.Combined.train$Player)[1], 16*nlevels(Data.Combined.train$Club)),
Length = rep(sort(unique(Data.Combined.train$Length)), each = 16),
Tags = rep(rep(levels(Data.Combined.train$Tags), each = 8), 6),
Club.Speed.quad = rep(mean(na.omit(Data.Combined.train$Club.Speed.quad)), nlevels(Data.Combined.train$Club)),
Angle.Of.Attack.quad = rep(mean(na.omit(Data.Combined.train$Angle.Of.Attack.quad)), nlevels(Data.Combined.train$Club)),
Face.To.Target.quad = rep(mean(na.omit(Data.Combined.train$Face.To.Target.quad)), nlevels(Data.Combined.train$Club)),
Club.Path.quad = rep(mean(na.omit(Data.Combined.train$Club.Path.quad)), nlevels(Data.Combined.train$Club)),
Face.To.Path.quad = rep(mean(na.omit(Data.Combined.train$Face.To.Path.quad)), nlevels(Data.Combined.train$Club)),
Loft.quad = rep(mean(na.omit(Data.Combined.train$Loft.quad)), nlevels(Data.Combined.train$Club)),
Lie.quad = rep(mean(na.omit(Data.Combined.train$Lie.quad)), nlevels(Data.Combined.train$Club)),
Lateral.Face.quad = rep(rep(Lateral.Impact.GMM, nlevels(Data.Combined.train$Tags)), nlevels(Data.Combined.train$Club)),
Vertical.Face.quad = rep(rep(Vertical.Impact.GMM, nlevels(Data.Combined.train$Tags)), nlevels(Data.Combined.train$Club)))
predict_data = c()
predict_data$Tags = rep(rep(levels(Data.Combined.train$Tags), each = 8), 6)
predict_data$Length = rep(sort(unique(Data.Combined.train$Length)), each = 16)
predict_data$Ball.Speed <- predict(lm.Ball.Speed.normalize, re.form= NA, newdata = new_data)
predict_data$Back.Spin <- predict(lm.Back.Spin.normalize, re.form= NA, newdata = new_data)
predict_data$Launch.Angle <- predict(lm.Launch.Angle.normalize, re.form= NA, newdata = new_data)
predict_data$Side.Spin <- predict(lm.Side.Spin.normalize, re.form= NA, newdata = new_data)
predict_data$Side.Angle <- predict(lm.Side.Angle.normalize, re.form= NA, newdata = new_data)
predict_data <- data.frame(predict_data)
#predict_data <- predict_data %>% filter(Length == 38)
predict_data
model_col_names <- c("Tags", "Club", "speed-mph", "back_spin-rpm", "launch_angle-deg", "side_spin-rpm",
"side_angle-deg")
colnames(predict_data) <- as.character(model_col_names)
aero_data <- predict_data %>% select("speed-mph", "back_spin-rpm", "launch_angle-deg", "side_spin-rpm",
"side_angle-deg")
library(reticulate)
use_python("C:/Users/Quenten.hooker/AppData/Local/Programs/Python/Python39/python.exe", required=TRUE)
reticulate::repl_python()
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import interpolate
import downrange.downrange as downrange
demo = downrange.Downrange()
environment = {
'env_temp_F':  75, #[deg F]
'env_rh-percent' : 50, #[% relative humidity]
'env_pre-psi': 14.7, #[psi]
'gravity' : 9.8066352, #[m/s^2], value from Petrisor's code
'wind' : [0,0,0] #X,Y,Z - positive = downwind, __, __
}
ball_properties={
'ball_size-inch': 1.6822,
'ball_mass-g':45.538,
'ball_moi-ozins2': 0.0011609
}
aerosurfacepath='C:/Users/Quenten.hooker/AppData/Local/Programs/Python/Python39/Lib/site-packages/downrange/ITRdata/csx22-10313/'
demo = downrange.Downrange(
environment=environment,
ball_properties=ball_properties,
#aerosurfacepath=aerosurfacepath
)
#From model predictions
py_aero_predict = r.aero_data
test = []
for k, row in py_aero_predict.iterrows():
results = demo.predictdownrange(row)
test.append(results)
trajectory, results = zip(*test)
df = pd.DataFrame(results)
#df2 = pd.DataFrame(trajectory[1])
#df3 = pd.DataFrame(trajectory[31])
#df4 = pd.DataFrame(trajectory[61])
quit
df_1 <- data.frame(reticulate::py$df)
predict_data$Carry.aero <- df_1$carry_yd
predict_data$Offline.aero <- df_1$carryDisp_yd
#predict_data <- predict_data %>% group_by(Club) %>% mutate(obs = n()) %>% filter(obs > 5)
model_col_names <- c("Club", "Length", "Ball.Speed", "Back.Spin", "Launch.Angle", "Side.Spin", "Side.Angle", "Carry.aero", "Offline.aero")
colnames(predict_data) <- model_col_names
predict_data
reticulate::repl_python()
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import interpolate
import downrange.downrange as downrange
demo = downrange.Downrange()
environment = {
'env_temp_F':  75, #[deg F]
'env_rh-percent' : 50, #[% relative humidity]
'env_pre-psi': 14.7, #[psi]
'gravity' : 9.8066352, #[m/s^2], value from Petrisor's code
'wind' : [0,0,0] #X,Y,Z - positive = downwind, __, __
}
ball_properties={
'ball_size-inch': 1.6822,
'ball_mass-g':45.538,
'ball_moi-ozins2': 0.0011609
}
aerosurfacepath='C:/Users/Quenten.hooker/AppData/Local/Programs/Python/Python39/Lib/site-packages/downrange/ITRdata/8323/'
demo = downrange.Downrange(
environment=environment,
ball_properties=ball_properties,
#aerosurfacepath=aerosurfacepath
)
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import interpolate
import downrange.downrange as downrange
demo = downrange.Downrange()
environment = {
'env_temp_F':  75, #[deg F]
'env_rh-percent' : 50, #[% relative humidity]
'env_pre-psi': 14.7, #[psi]
'gravity' : 9.8066352, #[m/s^2], value from Petrisor's code
'wind' : [0,0,0] #X,Y,Z - positive = downwind, __, __
}
ball_properties={
'ball_size-inch': 1.6822,
'ball_mass-g':45.538,
'ball_moi-ozins2': 0.0011609
}
aerosurfacepath='C:/Users/Quenten.hooker/AppData/Local/Programs/Python/Python39/Lib/site-packages/downrange/ITRdata/8323/'
demo = downrange.Downrange(
environment=environment,
ball_properties=ball_properties,
aerosurfacepath=aerosurfacepath
)
#From model predictions
py_aero_predict = r.aero_data
test = []
for k, row in py_aero_predict.iterrows():
results = demo.predictdownrange(row)
test.append(results)
trajectory, results = zip(*test)
df = pd.DataFrame(results)
#df2 = pd.DataFrame(trajectory[1])
#df3 = pd.DataFrame(trajectory[31])
#df4 = pd.DataFrame(trajectory[61])
quit
df_1 <- data.frame(reticulate::py$df)
predict_data$Carry.aero <- df_1$carry_yd
predict_data$Offline.aero <- df_1$carryDisp_yd
#predict_data <- predict_data %>% group_by(Club) %>% mutate(obs = n()) %>% filter(obs > 5)
model_col_names <- c("Club", "Length", "Ball.Speed", "Back.Spin", "Launch.Angle", "Side.Spin", "Side.Angle", "Carry.aero", "Offline.aero")
colnames(predict_data) <- model_col_names
predict_data
reticulate::repl_python()
demo = downrange.Downrange(
environment=environment,
ball_properties=ball_properties,
aerosurfacepath=aerosurfacepath
)
quit
library(reticulate)
use_python("C:/Users/Quenten.hooker/AppData/Local/Programs/Python/Python39/python.exe", required=TRUE)
reticulate::repl_python()
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import interpolate
import downrange.downrange as downrange
demo = downrange.Downrange()
environment = {
'env_temp_F':  75, #[deg F]
'env_rh-percent' : 50, #[% relative humidity]
'env_pre-psi': 14.7, #[psi]
'gravity' : 9.8066352, #[m/s^2], value from Petrisor's code
'wind' : [0,0,0] #X,Y,Z - positive = downwind, __, __
}
ball_properties={
'ball_size-inch': 1.6822,
'ball_mass-g':45.538,
'ball_moi-ozins2': 0.0011609
}
aerosurfacepath='C:/Users/Quenten.hooker/AppData/Local/Programs/Python/Python39/Lib/site-packages/downrange/ITRdata/8323/'
# demo = downrange.Downrange(
#                             environment=environment,
#                             ball_properties=ball_properties,
#                             aerosurfacepath=aerosurfacepath
#                             )
#From model predictions
py_aero_predict = r.aero_data
test = []
for k, row in py_aero_predict.iterrows():
results = demo.predictdownrange(row)
test.append(results)
trajectory, results = zip(*test)
df = pd.DataFrame(results)
#df2 = pd.DataFrame(trajectory[1])
#df3 = pd.DataFrame(trajectory[31])
#df4 = pd.DataFrame(trajectory[61])
quit
df_1 <- data.frame(reticulate::py$df)
df_1
model_col_names <- c("Tags", "Club", "speed-mph", "back_spin-rpm", "launch_angle-deg", "side_spin-rpm",
"side_angle-deg")
colnames(predict_data) <- as.character(model_col_names)
aero_data <- predict_data %>% select("speed-mph", "back_spin-rpm", "launch_angle-deg", "side_spin-rpm",
"side_angle-deg")
aero_data
reticulate::repl_python()
py_aero_predict = r.aero_data
test = []
for k, row in py_aero_predict.iterrows():
#From model predictions
py_aero_predict = r.aero_data
test = []
for k, row in py_aero_predict.iterrows():
results = demo.predictdownrange(row)
test.append(results)
trajectory, results = zip(*test)
results
py_aero_predict
quit
df_1 <- data.frame(reticulate::py$df)
df_1
reticulate::repl_python()
df
py_aero_predict = r.aero_data
test = []
for k, row in py_aero_predict.iterrows():
py_aero_predict = r.aero_data
test = []
for k, row in py_aero_predict.iterrows():
results = demo.predictdownrange(row)
test.append(results)
test
results
py_aero_predict
launch= {
'speed-mph':165.0,
'back_spin-rpm' : 2400,
'launch_angle-deg' : 12.5,
'side_spin-rpm' : -250,
'side_angle-deg' : 0.0
}
results = demo.predictdownrange(launch)
results
launch= {
'speed-mph':114.2854,
'back_spin-rpm' : 8793.482,
'launch_angle-deg' : 20.66551,
'side_spin-rpm' : -218.21636,
'side_angle-deg' : -1.16011703
}
results = demo.predictdownrange(launch)
results
launch= {
'speed-mph':114.2854,
'back_spin-rpm' : 8793.482,
'launch_angle-deg' : 20.66551,
'side_spin-rpm' : -218.21636,
'side_angle-deg' : -1.16011703
launch= {
'speed-mph':114.2854,
'back_spin-rpm' : 8793.482,
'launch_angle-deg' : 20.66551,
'side_spin-rpm' : -218.21636,
'side_angle-deg' : -1.16011703
}
launch= {
'speed-mph':114.2854,
'back_spin-rpm' : 8793.482,
'launch_angle-deg' : 20.66551,
'side_spin-rpm' : -218.21636,
'side_angle-deg' : -1.16011703
}
results = demo.predictdownrange(launch)
results
demo = downrange.Downrange()
launch= {
'speed-mph':114.2854,
'back_spin-rpm' : 8793.482,
'launch_angle-deg' : 20.66551,
'side_spin-rpm' : -218.21636,
'side_angle-deg' : -1.16011703
}
results = demo.predictdownrange(launch)
results
results[0]
results[1]
results = []
launch= {
results = []
launch= {
'speed-mph':114.2854,
'back_spin-rpm' : 8793.482,
'launch_angle-deg' : 20.66551,
'side_spin-rpm' : -218.21636,
'side_angle-deg' : -1.16011703}
results = demo.predictdownrange(launch)
results[1]
results[1]
results[1]
launch= {
quit
# library("ggplot2")
quit
# library("lme4")
quit
# library("car")
# library("dplyr")
# library("tidyr")
# library("lmerTest")
# library("ggpubr")
# library("GGally")
# library("emmeans")
# library("olsrr")
# library("readxl")
# library("ggforce")
# library("psych")
# library("jtools")
# library("sjPlot")
# library("sjmisc")
# library("kableExtra")
# library("knitr")
# library("sp")
# library("plotly")
# library("reshape2")
# library("ggeffects")
# library("MuMIn")
# library('lubridate')
# library('xlsx')
# library('stringi')
# library('fuzzyjoin')
# library('stringdist')
# library('reticulate')
# library('stringr')
pacman::p_load(ggplot2, dplyr, tidyr, ggpubr, sjPlot, kableExtra, sp, plotly, ggeffects, akima, lme4, stringr, reshape)
# Path.Women <- 'W:/quenten.hooker/Innovation_projects/Fitting/Gold_Panel_TTB_Data/Ladies/Quad/'
# File.Women <- 'Ladies Quad 11-23-2021.xlsx'
#
# Path.Men <- 'W:/quenten.hooker/Innovation_projects/Fitting/Gold_Panel_TTB_Data/Mens/Quad/'
# File.Men <- 'Comp Iron Quad 10-11-2021.xlsx'
#
#
# Data.Women <- read.xlsx(paste(c(Path.Women, File.Women), sep = "", collapse = ""), sheetName="FullData",as.data.frame=TRUE, startRow = 1)
# Data.Men <- xlsx::read.xlsx(paste(c(Path.Men, File.Men), sep = "", collapse = ""), sheetName="FullData",as.data.frame=TRUE, startRow = 1)
Data <- read.csv('Gold_Panel_Glob.csv')
col_names <- c("Player", "Club", "Tags", "FullTag", "Shot.ID", "Selected", "Date.quad", "Club.Type", "Club.ID", "Range.Ball.quad", "Ball.Speed.quad","Launch.Angle.quad", "Side.Angle.quad", "Side.Spin.quad", "Back.Spin.quad", "Tilt.Angle.quad", "Spin.Rate.quad", "Peak.Height.quad", "Carry.quad", "Range.quad", "Offline.quad", "Descent.Angle.quad", "Club.Speed.quad" ,"Efficiency.quad", "Angle.Of.Attack.quad", "Club.Path.quad", "Face.To.Target.quad", "Face.To.Path.quad", "Lie.quad", "Loft.quad", "Closing.Rate.quad", "Impact.Speed.quad", "Lateral.Face.quad", "Vertical.Face.quad", "Time", "Shot.Color")
colnames(Data) <- col_names
Data <- within(Data, {
Player <- factor(Player)
Club <- factor(Club)
Tags = factor(Tags)
Lateral.Face.quad <- as.numeric(Lateral.Face.quad)*-1
Vertical.Face.quad <- as.numeric(Vertical.Face.quad)
})
Data %>% group_by(Club) %>% summarise(n())
Data$Length[Data$Club== "PW"] <- 35.75
Data$Length[Data$Club== "9 Iron"] <- 36.0
Data$Length[Data$Club== "8 Iron"] <- 36.5
Data$Length[Data$Club== "7 Iron"] <- 37.0
Data$Length[Data$Club== "6 Iron"] <- 37.5
Data$Length[Data$Club== "5 Iron"] <- 38.0
Data.Combined <- Data
# create detect outlier function
# detect_outlier <- function(x) {
#
# 	# calculate first quantile
# 	Quantile1 <- quantile(x %>% na.omit(), probs=.25)
#
# 	# calculate third quantile
# 	Quantile3 <- quantile(x %>% na.omit(), probs=.75)
#
# 	# calculate inter quartile range
# 	IQR = Quantile3-Quantile1
#
# 	# return true or false
# 	x > Quantile3 + (IQR*1.5) | x < Quantile1 - (IQR*1.5)
# }
#
# # create remove outlier function
# remove_outlier <- function(dataframe,
# 							columns=names(dataframe)) {
#
# 	# for loop to traverse in columns vector
# 	for (col in columns) {
#
# 		# remove observation if it satisfies outlier function
# 		temp <- !detect_outlier(dataframe[[col]])
# 		temp[temp = NA] <- TRUE
# 	  dataframe <- dataframe[, ]
# 	}
#
# 	# return dataframe
# 	print("Remove outliers")
# 	print(dataframe)
# }
data_long_ball <- melt(Data.Combined %>% select(Ball.Speed.quad, Launch.Angle.quad, Side.Angle.quad, Side.Spin.quad, Back.Spin.quad))
data_long_club <- melt(Data.Combined %>% select(Club.Speed.quad, Angle.Of.Attack.quad, Club.Path.quad, Face.To.Target.quad, Face.To.Path.quad, Lie.quad, Loft.quad))
ggplot(data_long_ball, aes(x=value,)) + geom_boxplot() + facet_wrap(~variable, scale="free")
ggplot(data_long_club, aes(x=value,)) + geom_boxplot() + facet_wrap(~variable, scale="free")
Data.Combined <- Data.Combined %>% filter(Ball.Speed.quad > 50, Launch.Angle.quad < 50, Side.Angle.quad < 25, Side.Spin.quad < 2000, Back.Spin.quad > 3000, Face.To.Target.quad < 15, Face.To.Target.quad > -15, Lie.quad < 20, Lie.quad > -20, Loft.quad > 0)
ggplot(Data.Combined, aes(x = Length, y = Club.Speed.quad, color = Player)) + geom_point() + geom_smooth(se = FALSE)
